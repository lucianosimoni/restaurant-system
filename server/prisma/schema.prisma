// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Staff {
  id           Int              @id @default(autoincrement())
  credential   String           @unique
  passwordHash String
  // 游댋 Connections
  sectorLeader SectorLeader?
  info         StaffInfo        @relation(fields: [infoId], references: [id]) // Mandatory One-to-one relation to StaffInfo
  infoId       Int              @unique //九걾잺FK游리
  sector       Sector?          @relation(fields: [sectorId], references: [id]) // Optional Many-to-one relation to Sector
  sectorId     Int? //九걾잺FK游리
  timesheet    StaffTimesheet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffInfo {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  role      String @default("STAFF")
  // 游댋 Connections
  staff     Staff?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffTimesheet {
  id          Int       @id @default(autoincrement())
  imageInUrl  String
  imageOutUrl String?
  timeIn      DateTime
  timeOut     DateTime?
  // 游댋 Connections
  staff       Staff     @relation(fields: [staffId], references: [id])
  staffId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sector {
  id             Int           @id @default(autoincrement())
  title          String        @unique
  description    String?
  // 游댋 Connections
  staff          Staff[] // One-to-many relation to Staff
  screens        Screen[] // Many-to-Many relation to Screen
  workstations   Workstation[]
  sectorLeader   SectorLeader?
  childSectors   Sector[]      @relation("SectorToSector") // Self-relation for nested sectors
  parentSector   Sector?       @relation("SectorToSector", fields: [parentSectorId], references: [id]) // Self-relation for nested sectors
  parentSectorId Int? //九걾잺FK游리

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SectorLeader {
  id       Int    @id @default(autoincrement())
  // 游댋 Connections
  staff    Staff  @relation(fields: [staffId], references: [id]) // Mandatory One-to-one relation to Staff
  staffId  Int    @unique //九걾잺FK游리
  sector   Sector @relation(fields: [sectorId], references: [id]) // Mandatory One-to-one relation to Sector
  sectorId Int    @unique //九걾잺FK游리

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Categories -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
model Category {
  id     Int          @id @default(autoincrement())
  title  String       @unique
  // 游댋 Connections
  item   Item[]
  info   CategoryInfo @relation(fields: [infoId], references: [id])
  infoId Int          @unique //九걾잺FK游리

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryInfo {
  id          Int       @id @default(autoincrement())
  description String?
  imageURL    String?
  // 游댋 Connections
  category    Category?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// items -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
model Item {
  id       Int        @id @default(autoincrement())
  code     Int        @unique @default(autoincrement())
  title    String     @unique
  // 游댋 Connections
  category Category[]
  info     ItemInfo   @relation(fields: [infoId], references: [id])
  infoId   Int        @unique //九걾잺FK游리

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemInfo {
  id          Int        @id @default(autoincrement())
  description String?
  imageURL    String?
  price       Float
  cost        Float
  type        ItemType   @default(EMBALAGEM)
  unitSystem  UnitSystem @default(UN)
  // 游댋 Connections
  item        Item?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Screens (Pre-defined by Devs) -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
model Screen {
  id                  Int                  @id @default(autoincrement())
  title               String               @unique
  // 游댋 Connections
  info                ScreenInfo           @relation(fields: [infoId], references: [id])
  infoId              Int                  @unique //九걾잺FK游리
  sectors             Sector[]
  workstationSettings WorkstationSetting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScreenInfo {
  id          Int     @id @default(autoincrement())
  description String?
  path        String  @unique
  // 游댋 Connections
  screen      Screen?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Workstations -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
model Workstation {
  id        Int                @id @default(autoincrement())
  title     String             @unique
  // 游댋 Connections
  sectors   Sector[]
  info      WorkstationInfo    @relation(fields: [infoId], references: [id])
  infoId    Int                @unique //九걾잺FK游리
  setting   WorkstationSetting @relation(fields: [settingId], references: [id])
  settingId Int                @unique //九걾잺FK游리

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkstationInfo {
  id          Int          @id @default(autoincrement())
  description String?
  // 游댋 Connections
  workstation Workstation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkstationSetting {
  id          Int           @id @default(autoincrement())
  title       String        @unique // Cash Register, etc
  description String?
  // 游댋 Connections
  workstation Workstation[]
  screens     Screen[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENUM Lists -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
enum UnitSystem {
  UN
  KG
}

enum ItemType {
  REVENDA
  EMBALAGEM
  MATERIA_PRIMA
  PRODUTO_EM_PROCESSO
  PRODUTO_ACABADO
}
